# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class DriftResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, divergence: List[float]=None, p_value: List[float]=None):  # noqa: E501
        """DriftResponse - a model defined in Swagger

        :param divergence: The divergence of this DriftResponse.  # noqa: E501
        :type divergence: List[float]
        :param p_value: The p_value of this DriftResponse.  # noqa: E501
        :type p_value: List[float]
        """
        self.swagger_types = {
            'divergence': List[float],
            'p_value': List[float]
        }

        self.attribute_map = {
            'divergence': 'divergence',
            'p_value': 'p-value'
        }
        self._divergence = divergence
        self._p_value = p_value

    @classmethod
    def from_dict(cls, dikt) -> 'DriftResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The driftResponse of this DriftResponse.  # noqa: E501
        :rtype: DriftResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def divergence(self) -> List[float]:
        """Gets the divergence of this DriftResponse.


        :return: The divergence of this DriftResponse.
        :rtype: List[float]
        """
        return self._divergence

    @divergence.setter
    def divergence(self, divergence: List[float]):
        """Sets the divergence of this DriftResponse.


        :param divergence: The divergence of this DriftResponse.
        :type divergence: List[float]
        """
        if divergence is None:
            raise ValueError("Invalid value for `divergence`, must not be `None`")  # noqa: E501

        self._divergence = divergence

    @property
    def p_value(self) -> List[float]:
        """Gets the p_value of this DriftResponse.


        :return: The p_value of this DriftResponse.
        :rtype: List[float]
        """
        return self._p_value

    @p_value.setter
    def p_value(self, p_value: List[float]):
        """Sets the p_value of this DriftResponse.


        :param p_value: The p_value of this DriftResponse.
        :type p_value: List[float]
        """

        self._p_value = p_value
