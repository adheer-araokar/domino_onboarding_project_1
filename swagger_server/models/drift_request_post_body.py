# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.drift_algo_inputs_data import DriftAlgoInputsData  # noqa: F401,E501
from swagger_server import util


class DriftRequestPostBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, test_type: str=None, input_data: DriftAlgoInputsData=None):  # noqa: E501
        """DriftRequestPostBody - a model defined in Swagger

        :param test_type: The test_type of this DriftRequestPostBody.  # noqa: E501
        :type test_type: str
        :param input_data: The input_data of this DriftRequestPostBody.  # noqa: E501
        :type input_data: DriftAlgoInputsData
        """
        self.swagger_types = {
            'test_type': str,
            'input_data': DriftAlgoInputsData
        }

        self.attribute_map = {
            'test_type': 'test_type',
            'input_data': 'input_data'
        }
        self._test_type = test_type
        self._input_data = input_data

    @classmethod
    def from_dict(cls, dikt) -> 'DriftRequestPostBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The driftRequestPostBody of this DriftRequestPostBody.  # noqa: E501
        :rtype: DriftRequestPostBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def test_type(self) -> str:
        """Gets the test_type of this DriftRequestPostBody.


        :return: The test_type of this DriftRequestPostBody.
        :rtype: str
        """
        return self._test_type

    @test_type.setter
    def test_type(self, test_type: str):
        """Sets the test_type of this DriftRequestPostBody.


        :param test_type: The test_type of this DriftRequestPostBody.
        :type test_type: str
        """
        allowed_values = ["kl", "ks", "chi2"]  # noqa: E501
        if test_type not in allowed_values:
            raise ValueError(
                "Invalid value for `test_type` ({0}), must be one of {1}"
                .format(test_type, allowed_values)
            )

        self._test_type = test_type

    @property
    def input_data(self) -> DriftAlgoInputsData:
        """Gets the input_data of this DriftRequestPostBody.


        :return: The input_data of this DriftRequestPostBody.
        :rtype: DriftAlgoInputsData
        """
        return self._input_data

    @input_data.setter
    def input_data(self, input_data: DriftAlgoInputsData):
        """Sets the input_data of this DriftRequestPostBody.


        :param input_data: The input_data of this DriftRequestPostBody.
        :type input_data: DriftAlgoInputsData
        """
        if input_data is None:
            raise ValueError("Invalid value for `input_data`, must not be `None`")  # noqa: E501

        self._input_data = input_data
